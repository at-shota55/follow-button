var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "patch", function () {
  return patch;
});
var _render = require("./render");
var _utils = require("./utils");
// 前と今を比較している関数
const hasChanged = (oldNode, newNode) => {
  if (typeof oldNode !== typeof newNode) {
    return "TYPE";
  }
  if (_utils.isTextChild(oldNode) && _utils.isTextChild(newNode)) {
    if (oldNode.children[0] !== newNode.children[0]) {
      return "TEXT";
    }
  }
  if (_utils.isVNode(oldNode) && _utils.isVNode(newNode)) {
    if (oldNode.tagName !== newNode.tagName) {
      return "NODE";
    }
    if (JSON.stringify(oldNode.attrs) !== JSON.stringify(newNode.attrs)) {
      return "ATTR";
    }
  }
  return "NONE";
};
const updateAttrs = (target, oldAttrs, newAttrs) => {
  for (const attr in oldAttrs) {
    if (!_utils.isEventAttr(attr)) {
      target.removeAttribute(attr);
    }
  }
  for (const attr in newAttrs) {
    if (!_utils.isEventAttr(attr)) {
      target.setAttribute(attr, newAttrs[attr]);
    }
  }
};
const patch = (parent, newNode, oldNode, index = 0) => {
  if (!oldNode) {
    // 最初の描画時
    parent.appendChild(_render.render(newNode));
  }
  const childNode = parent.childNodes[index];
  if (!newNode) {
    parent.removeChild(childNode);
  }
  // 差分を検知
  const type = hasChanged(oldNode, newNode);
  switch (type) {
    case "TYPE":
    case "TEXT":
    case "NODE":
      parent.replaceChild(_render.render(newNode), childNode);
      return;
    case "ATTR":
      updateAttrs(childNode, oldNode.attrs, newNode.attrs);
      return;
  }
  if (newNode.tagName) {
    const newLength = newNode.children.length;
    const oldLength = oldNode.children.length;
    for (let i = 0; i < newLength || i < oldLength; i++) {
      patch(childNode, newNode.children[i], oldNode.children[i], i);
    }
  }
};
